[{"D:\\reactTesting\\blog1\\src\\index.js":"1","D:\\reactTesting\\blog1\\src\\App.js":"2","D:\\reactTesting\\blog1\\src\\reportWebVitals.js":"3","D:\\reactTesting\\blog1\\src\\Pages\\PostList.js":"4","D:\\reactTesting\\blog1\\src\\Pages\\PostEdit.js":"5","D:\\reactTesting\\blog1\\src\\Pages\\PostDetail.js":"6","D:\\reactTesting\\blog1\\src\\Util\\JsonUtil.js":"7","D:\\reactTesting\\blog1\\src\\Components\\PostManage.js":"8","D:\\reactTesting\\blog1\\src\\reactQuery.js":"9","D:\\reactTesting\\blog1\\src\\Components\\CommentList.js":"10","D:\\reactTesting\\blog1\\src\\Components\\CommentEdit.js":"11"},{"size":1133,"mtime":1611066507536,"results":"12","hashOfConfig":"13"},{"size":1575,"mtime":1611066743009,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":2621,"mtime":1611065356034,"results":"16","hashOfConfig":"13"},{"size":1672,"mtime":1611051142641,"results":"17","hashOfConfig":"13"},{"size":3123,"mtime":1611052670660,"results":"18","hashOfConfig":"13"},{"size":281,"mtime":1611035377373,"results":"19","hashOfConfig":"13"},{"size":2477,"mtime":1611048271376,"results":"20","hashOfConfig":"13"},{"size":146,"mtime":1611040167498,"results":"21","hashOfConfig":"13"},{"size":895,"mtime":1611067608115,"results":"22","hashOfConfig":"13"},{"size":2588,"mtime":1611055092416,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"15us4ac",{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"27"},"D:\\reactTesting\\blog1\\src\\index.js",["54","55"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, CSSReset, ColorModeScript, theme } from \"@chakra-ui/react\"\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport {ReactQueryCacheProvider, QueryClientProvider} from \"react-query\";\nimport {queryCache, queryClient} from \"./reactQuery\"\nReactDOM.render(\n\n\n  <React.StrictMode>\n    <ChakraProvider>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <CSSReset />\n      <Router>\n        {/* <ReactQueryCacheProvider queryCache={queryCache}> */}\n        <QueryClientProvider client={queryClient} >\n        <App />\n        </QueryClientProvider>\n        {/* </ReactQueryCacheProvider> */}\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["56","57"],"D:\\reactTesting\\blog1\\src\\App.js",["58","59","60"],"import './App.css';\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport PostList from './Pages/PostList';\nimport PostEdit from './Pages/PostEdit';\nimport PostDetail from './Pages/PostDetail';\nimport { Box, useDisclosure, IconButton,useColorMode, ColorModeScript } from '@chakra-ui/react';\nimport { MoonIcon } from '@chakra-ui/icons'\nimport {MdDehaze} from \"react-icons/md\";\n\nfunction App() {\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure()\n  const { colorMode, toggleColorMode } = useColorMode()\n  return (\n    <Box h=\"100%\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <Redirect to=\"/posts\" />\n        </Route>\n        <Route path=\"/posts/new\"><PostEdit /></Route>\n        <Box h=\"100%\">\n          <Box padding=\".4rem\" minHeight=\"40px\" borderBottom=\"1px solid #ccc\">\n          <IconButton display={{\n            sm:\"block\",\n            md:\"none\"\n          }}  colorScheme=\"teal\" onClick={onToggle} icon={ <MdDehaze/>} />\n          <IconButton icon={<MoonIcon/>} onClick={toggleColorMode}/>\n          {/* <IconButton SunIcon> */}\n           </Box>\n\n\n          <Box maxW={{\n            lg:\"60%\",\n            md:\"80%\",\n            sm:\"100%\"\n          }}\n          padding={{\n            sm:\"2rem\",\n            md:\"0\"\n          }}\n          marginX=\"auto\" display=\"flex\"  h=\"100%\">\n            <Route path=\"/posts\"><PostList isDrawerOpen={isOpen} closeDrawer={onClose} /></Route>\n            <Route path=\"/posts/:postId\" ><PostDetail /></Route>\n          </Box>\n\n        </Box>\n\n\n\n      </Switch>\n    </Box>\n  );\n}\n\nexport default App;\n","D:\\reactTesting\\blog1\\src\\reportWebVitals.js",[],"D:\\reactTesting\\blog1\\src\\Pages\\PostList.js",["61","62","63","64","65","66"],"import { List, ListItem, ListIcon, Link, Box,  Drawer,DrawerBody,DrawerFooter,DrawerHeader,DrawerOverlay,DrawerContent,DrawerCloseButton, Button,Input, useDisclosure } from \"@chakra-ui/react\"\r\nimport React,{useEffect, useState} from 'react'\r\nimport {Get} from \"../Util/JsonUtil\" \r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useQuery } from \"react-query\";\r\n\r\n\r\nconst PostList = ({isDrawerOpen, closeDrawer}) => {\r\n    console.log(isDrawerOpen)\r\n    // const [list, setList]= useState([])\r\n    // const [loading, setLoding]= useState(true)\r\n  \r\n \r\n    const {isLoading, error, data} = useQuery(\"postList\", ()=>{\r\n        return Get(\"http://localhost:3002/posts\");\r\n           \r\n    })\r\n    // const getPostList=()=>{\r\n    //     Get(\"http://localhost:3002/posts\").then(res=>{\r\n    //         console.log(res)\r\n    //         setLoding(false)\r\n    //         setList(res.data)\r\n    //     }).catch(err=>{\r\n    //         console.log(err)\r\n    //     })\r\n    // }\r\n    \r\n    // useEffect(()=>{\r\n    //     //getPostList()\r\n    // },[])\r\n    return (\r\n        <Box w={{\r\n            sm:\"0\",\r\n            md:\"20%\",\r\n            \r\n        }} h=\"100%\">\r\n            {isLoading?(\"Loading...\")\r\n            :\r\n            (\r\n                <List d={{\r\n                    sm:\"none\",\r\n                    md:\"block\",\r\n                   \r\n                }} borderRight=\"1px solid #ccc\" h=\"100%\">\r\n                    {data.data.map(data=>(\r\n                <ListItem  key={data.id}>\r\n                    <Link padding=\".8rem\" display=\"flex\" as={RouterLink} to={`/posts/${data.id}`}>{data.title}</Link>\r\n                    </ListItem>\r\n            ))}</List>\r\n            )}\r\n           <Drawer\r\n        isOpen={isDrawerOpen}\r\n        placement=\"left\"\r\n        onClose={closeDrawer}\r\n        \r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Blog List</DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              {data?data.data.map(data=>(\r\n                <ListItem listStyleType=\"none\" key={data.id}>\r\n                    <Link padding=\".8rem\" display=\"flex\" as={RouterLink} to={`/posts/${data.id}`}>{data.title}</Link>\r\n                    </ListItem>\r\n            )):null}\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={closeDrawer}>\r\n                Cancel\r\n              </Button>\r\n             \r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n           \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PostList\r\n","D:\\reactTesting\\blog1\\src\\Pages\\PostEdit.js",["67","68","69","70","71","72","73","74","75","76","77","78","79","80"],"import React, { useState } from 'react'\r\nimport { FormControl, FormLabel, FormErrorMessage, Input, Button, Box, Textarea } from \"@chakra-ui/react\";\r\nimport { Post } from \"../Util/JsonUtil\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport PostManage from '../Components/PostManage';\r\nimport { useMutation, useQuery } from \"react-query\";\r\nimport {queryClient} from \"../reactQuery\";\r\n\r\nconst createPost =({title, description}) =>{\r\n   return Post(\"http://localhost:3002/posts\", {\r\n    title, description\r\n})\r\n}\r\n\r\nconst PostEdit = () => {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n\r\n  const mutate = useMutation(createPost)\r\n\r\n    const onSubmitHandler = (value) => {\r\n        const {title,description}= value\r\n     mutate.mutateAsync({title, description}).then(data=>{\r\n        console.log(data)\r\n        // setTitle(\"\")\r\n        // setDescription(\"\")\r\n        history.push(\"/posts\")\r\n     }).catch(err=>{\r\n         console.log(err)\r\n     })\r\n        // const {title, description} = value\r\n        //    Post(\"http://localhost:3002/posts\", {\r\n        //        title, description\r\n        //    }).then(data=>{\r\n        //       console.log(data)\r\n        //       setTitle(\"\")\r\n        //       setDescription(\"\")\r\n        //       history.push(\"/posts\")\r\n        //    }).catch(err=>{\r\n        //        console.log(err)\r\n        //    })\r\n    }\r\n   \r\n    return (\r\n        <Box maxW=\"40%\" marginX=\"auto\">\r\n           <PostManage onSubmit={onSubmitHandler}/>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PostEdit\r\n","D:\\reactTesting\\blog1\\src\\Pages\\PostDetail.js",["81","82","83"],"import { Button, useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton,Box } from '@chakra-ui/react';\r\nimport React, {useEffect, useState} from 'react'\r\nimport {useParams} from \"react-router-dom\";\r\nimport PostManage from '../Components/PostManage';\r\nimport { Get, Put } from '../Util/JsonUtil';\r\nimport { useMutation, useQuery } from \"react-query\";\r\nimport {queryClient} from \"../reactQuery\";\r\nimport CommentList from '../Components/CommentList';\r\nimport CommentEdit from '../Components/CommentEdit';\r\n\r\n\r\n\r\nconst PostDetail = () => {\r\n    // const [postDetail, setPostDetail] = useState(null)\r\n    const {postId} = useParams()\r\n    \r\n\r\n   const {isLoading, error, data, refetch} = useQuery(\"postDetail\", ()=>{\r\n      return  Get(`http://localhost:3002/posts/${postId}`)\r\n    })\r\n\r\n    const editPost = ({postId, title, description})=>{\r\n      return Put(`http://localhost:3002/posts/${postId}`,{\r\n        title, description\r\n      })\r\n  }\r\n\r\n    const mutate = useMutation(editPost)\r\n     console.log(mutate)\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n   \r\n    // const getPostDetail = ()=>{\r\n    //     Get(`http://localhost:3002/posts/${postId}`).then(res=>{\r\n    //         console.log(res)\r\n    //         setPostDetail(res.data)\r\n            \r\n    //     }).catch(err=>{\r\n    //         console.log(err)\r\n            \r\n    //     })\r\n    // }\r\n\r\n\r\n    const onSubmitHandler = (values) =>{\r\n      const {title, description} = values;\r\n      mutate.mutateAsync({postId,title, description }).then(res=>{\r\n        onClose()\r\n        refetch()\r\n        queryClient.refetchQueries(['postList'])\r\n      }).catch(err=>{\r\n        console.log(err)\r\n      })\r\n       console.log(values)\r\n      //  Put(`http://localhost:3002/posts/${postId}`,values).then(res=>{\r\n      //       console.log(res)\r\n      //       onClose()\r\n      //       refetch()\r\n      //       // setPostDetail(res.data)\r\n      //   }).catch(err=>{\r\n      //       console.log(err)\r\n\r\n      //   })\r\n    }\r\n    useEffect(()=>{\r\n       refetch()\r\n    },[postId])\r\n    return (\r\n        <Box width=\"80%\">\r\n           {isLoading?\"Loading...\":\r\n           <Box>{data.data.description}<Box display=\"flex\" justifyContent=\"flex-end\"><Button onClick={onOpen}>Edit</Button></Box>\r\n         \r\n           <CommentEdit postId={postId}/>\r\n           <CommentList postId={postId}/>\r\n             <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Post Manage</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <PostManage onSubmit={onSubmitHandler}\r\n             defaultTitle={data.data.title}\r\n             defaultDescription={data.data.description}\r\n              />\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n           \r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n           \r\n           </Box>\r\n           }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PostDetail\r\n","D:\\reactTesting\\blog1\\src\\Util\\JsonUtil.js",[],"D:\\reactTesting\\blog1\\src\\Components\\PostManage.js",["84"],"import React from 'react'\r\nimport { FormControl, FormLabel, FormErrorMessage, Input, Button, Box, Textarea } from \"@chakra-ui/react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nconst PostManage = ({onSubmit, defaultTitle, defaultDescription}) => {\r\n    const { handleSubmit, control, errors } = useForm();\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n        <FormControl isInvalid={errors.title}>\r\n            <FormLabel htmlFor=\"title\">Title</FormLabel>\r\n\r\n            <Controller\r\n                defaultValue={defaultTitle}\r\n                name=\"title\"\r\n                control={control}\r\n                as={Input}\r\n                placeholder=\"title\"\r\n                rules={{\r\n                    required: {\r\n                        value: true,\r\n                        message: \"It is requied\"\r\n                    },\r\n                    minLength: {\r\n                        value: 3,\r\n                        message: \"minimum length is 3\"\r\n                    },\r\n                    maxLength:{\r\n                        value:20,\r\n                        message: \"maximum length is 20\"\r\n                    }\r\n                }}\r\n            />\r\n            <FormErrorMessage>{errors.title && errors.title.message}</FormErrorMessage>\r\n        </FormControl>\r\n        <FormControl isInvalid={errors.description}>\r\n            <FormLabel htmlFor=\"description\">Description</FormLabel>\r\n            <Controller\r\n                defaultValue={defaultDescription}\r\n                name=\"description\"\r\n                control={control}\r\n                as={Textarea}\r\n                placeholder=\"description\"\r\n                rules={{\r\n                    required: {\r\n                        value: true,\r\n                        message: \"It is requied\"\r\n                    },\r\n                    minLength: {\r\n                        value: 3,\r\n                        message: \"minimum length is 3\"\r\n                    },\r\n                    maxLength:{\r\n                        value:100,\r\n                        message: \"maximum length is 100\"\r\n                    }\r\n                }}\r\n            />\r\n            <FormErrorMessage>{errors.description && errors.description.message}</FormErrorMessage>\r\n        </FormControl>\r\n        <Button type=\"submit\" colorScheme=\"teal\" marginTop=\"1rem\" >\r\n            {defaultTitle?\"Edit Post\":\"Add Post\"}\r\n        </Button>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default PostManage\r\n","D:\\reactTesting\\blog1\\src\\reactQuery.js",[],"D:\\reactTesting\\blog1\\src\\Components\\CommentList.js",["85","86","87","88"],"D:\\reactTesting\\blog1\\src\\Components\\CommentEdit.js",["89","90","91","92"],"import React, { useState } from 'react'\r\nimport { FormControl, FormLabel, FormErrorMessage, Input, Button, Box, Textarea } from \"@chakra-ui/react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { Post } from '../Util/JsonUtil';\r\nimport { useMutation } from 'react-query';\r\nimport {queryClient} from \"../reactQuery\";\r\n\r\nconst createComment = (content) => {\r\n    console.log(content)\r\n    const {comment, postId}= content\r\n    return Post(\"http://localhost:3002/comments\", { comment, postId })\r\n}\r\n\r\nconst CommentEdit = ({postId}) => {\r\n   \r\n    console.log(postId)\r\n    const { handleSubmit, control, errors, reset } = useForm({\r\n        mode: \"onTouched\",\r\n    });\r\n    const mutate = useMutation(createComment)\r\n\r\n    const onSubmitHandler = (data) => {\r\n        console.log(data);\r\n        console.log(postId)\r\n        const {comment} = data\r\n        mutate.mutateAsync({ comment, postId }).then((res) => {\r\n            console.log(res)\r\n            queryClient.refetchQueries(['commentList'])\r\n            reset()\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmitHandler)}>\r\n                <FormControl isInvalid={errors.comment}>\r\n                    <FormLabel htmlFor=\"comment\">Comment</FormLabel>\r\n\r\n                    <Controller\r\n                        defaultValue=\"\"\r\n                        name=\"comment\"\r\n                        control={control}\r\n                        as={Input}\r\n                        placeholder=\"comment\"\r\n                        rules={{\r\n                            required: {\r\n                                value: true,\r\n                                message: \"It is requied\"\r\n                            },\r\n                            minLength: {\r\n                                value: 3,\r\n                                message: \"minimum length is 3\"\r\n                            },\r\n                            maxLength: {\r\n                                value: 20,\r\n                                message: \"maximum length is 20\"\r\n                            }\r\n                        }}\r\n                    />\r\n                    <FormErrorMessage>{errors.comment && errors.comment.message}</FormErrorMessage>\r\n                </FormControl>\r\n\r\n                <Button type=\"submit\" colorScheme=\"teal\" marginTop=\"1rem\" >\r\n                    ADD Comment\r\n        </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentEdit\r\n",{"ruleId":"93","severity":1,"message":"94","line":8,"column":9,"nodeType":"95","messageId":"96","endLine":8,"endColumn":32},{"ruleId":"93","severity":1,"message":"97","line":9,"column":9,"nodeType":"95","messageId":"96","endLine":9,"endColumn":19},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"93","severity":1,"message":"102","line":6,"column":55,"nodeType":"95","messageId":"96","endLine":6,"endColumn":70},{"ruleId":"93","severity":1,"message":"103","line":11,"column":19,"nodeType":"95","messageId":"96","endLine":11,"endColumn":25},{"ruleId":"93","severity":1,"message":"104","line":12,"column":11,"nodeType":"95","messageId":"96","endLine":12,"endColumn":20},{"ruleId":"93","severity":1,"message":"105","line":1,"column":26,"nodeType":"95","messageId":"96","endLine":1,"endColumn":34},{"ruleId":"93","severity":1,"message":"106","line":1,"column":146,"nodeType":"95","messageId":"96","endLine":1,"endColumn":151},{"ruleId":"93","severity":1,"message":"107","line":1,"column":153,"nodeType":"95","messageId":"96","endLine":1,"endColumn":166},{"ruleId":"93","severity":1,"message":"108","line":2,"column":15,"nodeType":"95","messageId":"96","endLine":2,"endColumn":24},{"ruleId":"93","severity":1,"message":"109","line":2,"column":26,"nodeType":"95","messageId":"96","endLine":2,"endColumn":34},{"ruleId":"93","severity":1,"message":"110","line":14,"column":23,"nodeType":"95","messageId":"96","endLine":14,"endColumn":28},{"ruleId":"93","severity":1,"message":"111","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":21},{"ruleId":"93","severity":1,"message":"112","line":2,"column":23,"nodeType":"95","messageId":"96","endLine":2,"endColumn":32},{"ruleId":"93","severity":1,"message":"113","line":2,"column":34,"nodeType":"95","messageId":"96","endLine":2,"endColumn":50},{"ruleId":"93","severity":1,"message":"106","line":2,"column":52,"nodeType":"95","messageId":"96","endLine":2,"endColumn":57},{"ruleId":"93","severity":1,"message":"114","line":2,"column":59,"nodeType":"95","messageId":"96","endLine":2,"endColumn":65},{"ruleId":"93","severity":1,"message":"115","line":2,"column":72,"nodeType":"95","messageId":"96","endLine":2,"endColumn":80},{"ruleId":"93","severity":1,"message":"116","line":5,"column":10,"nodeType":"95","messageId":"96","endLine":5,"endColumn":17},{"ruleId":"93","severity":1,"message":"117","line":5,"column":19,"nodeType":"95","messageId":"96","endLine":5,"endColumn":29},{"ruleId":"93","severity":1,"message":"118","line":7,"column":23,"nodeType":"95","messageId":"96","endLine":7,"endColumn":31},{"ruleId":"93","severity":1,"message":"119","line":8,"column":9,"nodeType":"95","messageId":"96","endLine":8,"endColumn":20},{"ruleId":"93","severity":1,"message":"120","line":17,"column":12,"nodeType":"95","messageId":"96","endLine":17,"endColumn":17},{"ruleId":"93","severity":1,"message":"121","line":17,"column":19,"nodeType":"95","messageId":"96","endLine":17,"endColumn":27},{"ruleId":"93","severity":1,"message":"122","line":18,"column":12,"nodeType":"95","messageId":"96","endLine":18,"endColumn":23},{"ruleId":"93","severity":1,"message":"123","line":18,"column":25,"nodeType":"95","messageId":"96","endLine":18,"endColumn":39},{"ruleId":"93","severity":1,"message":"109","line":2,"column":27,"nodeType":"95","messageId":"96","endLine":2,"endColumn":35},{"ruleId":"93","severity":1,"message":"110","line":18,"column":22,"nodeType":"95","messageId":"96","endLine":18,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":66,"column":7,"nodeType":"126","endLine":66,"endColumn":15,"suggestions":"127"},{"ruleId":"93","severity":1,"message":"128","line":2,"column":67,"nodeType":"95","messageId":"96","endLine":2,"endColumn":70},{"ruleId":"93","severity":1,"message":"129","line":4,"column":26,"nodeType":"95","messageId":"96","endLine":4,"endColumn":34},{"ruleId":"93","severity":1,"message":"130","line":4,"column":36,"nodeType":"95","messageId":"96","endLine":4,"endColumn":48},{"ruleId":"93","severity":1,"message":"119","line":5,"column":9,"nodeType":"95","messageId":"96","endLine":5,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":15,"column":7,"nodeType":"126","endLine":15,"endColumn":15,"suggestions":"131"},{"ruleId":"93","severity":1,"message":"109","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"128","line":2,"column":67,"nodeType":"95","messageId":"96","endLine":2,"endColumn":70},{"ruleId":"93","severity":1,"message":"115","line":2,"column":72,"nodeType":"95","messageId":"96","endLine":2,"endColumn":80},{"ruleId":"93","severity":1,"message":"132","line":4,"column":10,"nodeType":"95","messageId":"96","endLine":4,"endColumn":19},"no-unused-vars","'ReactQueryCacheProvider' is defined but never used.","Identifier","unusedVar","'queryCache' is defined but never used.","no-native-reassign",["133"],"no-negated-in-lhs",["134"],"'ColorModeScript' is defined but never used.","'onOpen' is assigned a value but never used.","'colorMode' is assigned a value but never used.","'ListIcon' is defined but never used.","'Input' is defined but never used.","'useDisclosure' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'error' is assigned a value but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'FormErrorMessage' is defined but never used.","'Button' is defined but never used.","'Textarea' is defined but never used.","'useForm' is defined but never used.","'Controller' is defined but never used.","'useQuery' is defined but never used.","'queryClient' is defined but never used.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["135"],"'Box' is defined but never used.","'useTheme' is defined but never used.","'useColorMode' is defined but never used.",["136"],"'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"137","fix":"139"},"Update the dependencies array to be: [postId, refetch]",{"range":"140","text":"141"},{"range":"142","text":"141"},[2081,2089],"[postId, refetch]",[505,513]]